@page "/user"
@using TestBUS.Service.Interface
@using MudBlazor
@using TestBUS.ViewModel
@inject IDialogService DialogService
@inject IUserService userService
@inject NavigationManager NavigationManager

<MudCard>
    <MudCardContent>
        <MudText Typo="Typo.h5">User List</MudText>
    </MudCardContent>
    <MudCardContent>
        <MudTable Items="_users" Loading="_loading" Dense="true">
            <HeaderContent>
                <MudTh>Name</MudTh>
                <MudTh>Email</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>PhoneNumber</MudTh>
                <MudTh>Actions</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd>@context.Name</MudTd>
                <MudTd>@context.Email</MudTd>
                <MudTd>@context.Status</MudTd>
                <MudTd>@context.PhoneNumber</MudTd>
                <MudTd>
                    <MudButton Variant="Variant.Text" OnClick="() => UpdateUser(context.UserId)">Edit</MudButton>
                    <MudButton Variant="Variant.Text" Color="Color.Error" OnClick="() => ConfirmDeleteUser(context.UserId, context.Name)">Delete</MudButton>
                </MudTd>
            </RowTemplate>
        </MudTable>
    </MudCardContent>
    <MudCardActions>
        <MudButton Variant="Variant.Text" Color="Color.Primary" OnClick="AddUser">Add</MudButton>
    </MudCardActions>
</MudCard>

@code {
    private List<UserVM> _users = new();
    private bool _loading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        _loading = true;
        try
        {
            _users = await userService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading users: {ex.Message}");
        }
        finally
        {
            _loading = false;
        }
    }

    private void AddUser()
    {
        NavigationManager.NavigateTo("/usercreate");
    }

    private void UpdateUser(int id)
    {
        NavigationManager.NavigateTo($"/userupdate/{id}");
    }

    private async Task ConfirmDeleteUser(int userId, string userName)
    {
        var parameters = new DialogParameters
        {
            { "ItemName", userName } 
        };

        var options = new DialogOptions
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Small,
                FullWidth = true
            };

        var dialog = DialogService.Show<DeleteDialog>("Confirm Delete", parameters, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            await DeleteUser(userId);
        }
    }

    private async Task DeleteUser(int userId)
    {
        try
        {
            await userService.DeleteAsync(userId);
            _users.RemoveAll(u => u.UserId == userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting user: {ex.Message}");
        }
    }
}
